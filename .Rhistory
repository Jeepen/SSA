lambda[br1 <= u & u < br2] * L[br1 <= u & u < br2] * (exp(gamma) - 1)) /
(lambda[br1 <= u & u < br2] * exp(gamma))
X[br2<=u] <- (-log(1 - u[br2 <= u]) + lambda[br2 <= u] * D1 * (1 - exp(gamma))) / lambda[br2 <= u]
T <- pmin(X, tau)
ExpCases <- (X <= tau)                                 ## Exposed cases (EC)
casesT <- T[ExpCases]                                  ## Failure time for EC
casesL <- L[ExpCases]                                  ## Treatment start for EC
casesExpRef <- ((casesT - D2) > casesL & (casesT - D2) < (casesL + D1))
casesExpEvent <- (casesT > casesL & (casesT - D1) < casesL)    ## Exposed at event EC
nCases <- length(casesT)                               ## Number of EC
id <- rep(1:nCases,2)                                  ## Their ID number twice
## Collect in data.frame
dCase <- data.frame(id=id,clusters=id,status=rep(c(1,0),each=nCases),
Exp=c(casesExpEvent,casesExpRef), case = 1)
## Sample controls in usual way
controlsExp <- which(X>tau)[1:nCases]
controlsL <- L[controlsExp]
controlsExpRef <- ((casesT-D2)>controlsL&(casesT-D2)<(controlsL+D1))
controlsExpEvent <- (casesT>controlsL&(casesT-D1)<controlsL)
dControl <- data.frame(id=id+nCases,clusters=id,status=rep(c(1,0),each=nCases),
Exp=c(controlsExpEvent,controlsExpRef), case = 0)
d <- rbind(dCase,dControl)
d <- transform(d, EG = Exp*case)
tmp <- coxph(Surv(rep(1,nrow(d)), status) ~ Exp + EG + strata(id), data=d)
proposed[i] <- coef(tmp)[2]
}
summary(proposed)
tmp
summary(proposed)
mean(proposed) + c(-1.96, 1.96) * sd(proposed) / sqrt(nsim)
4 + 64
36 + 64
4 + 81
64 + 25
64 + 81
1 + 16 + 25
16 + 4
4
16
1 + 36
9 + 49
25 + 64
.75*70
50*.8
50*.8^2
library(simsurv)
install.packages("simsurv")
library(simsurv)
?simsurv
x <- simsurv(dist = "gompertz", lambdas = 7.34, gammas = .0796)
x <- simsurv(dist = "gompertz", lambdas = 7.34, gammas = .0796, x = NULL)
install.packages("dgompertz")
install.packages("flexsurvreg")
library(installr)
updateR()
updateR()
library(installr)
updateR()
q()
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
# No effect of treatment, no frailty, no timetrend, and infinite delta
simNoEffNoFrailtyNoTTInfDelta <- simfunction(nsim = 100)
round(apply(simNoEffNoFrailtyNoTTInfDelta, 2, mean), 2)                         # Everything works
round(exp(mean(simNoEffNoFrailtyNoTTInfDelta[,4])), 2)
summary(simNoEffNoFrailtyNoTTInfDelta)
X <- rexp(1e5, rate = .005)
mean(X)
Y <- rexp(1e5, rate = .005)
summary(abs(X-Y))
pexp(10,rate = .005)
pexp(10,rate = .005) / pexp(80, rate = .005)
source("function.R")
source("function.R")
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.005, .0025)
frailtyVar <- c(0,1)
HR <- c(1,2)
results <- NA
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- list(results, simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
}
}
}
}
}
library(simsurv)
results <- NA
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- list(results, simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
}
}
}
}
}
source("function.R")
results <- NA
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- list(results, simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
}
}
}
}
}
summary(results)
results[[1]][[1]]
results[[1]]
results[[1]][,1]
# All simulations ---------------------------------------------------------
results <- list()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- list(results, list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
simfunction(n = 1e2, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp)))
}
}
}
}
}
# All simulations ---------------------------------------------------------
results <- list()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- list(results, list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp)))
}
}
}
}
}
results[[1]]$name
str(results[[1]])
results[[1]][[1]]$name
results[[1]][[1]][[1]]
li = list('java','python')
li2 <- append(li,'r')
print(li2)
# All simulations ---------------------------------------------------------
results <- list()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results <- append(results, list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars,
delta = delta, comprisk = comp)))
}
}
}
}
}
str(results[[1]])
results[[1]]
results
results$ests
summary(results$ests)
dim(results$ests)
dim(results$name)
results$name
?append
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e3, nsim = 100, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
}
}
}
}
}
results[[1]]$name
results[[2]]$name
results[[3]]$name
saveRDS(results, "allresults.rds")
length(results)
# Save results ------------------------------------------------------------
smallresults <- data.frame(delta = NULL, comprisk = NULL, lambda = NULL, var = NULL, HR = NULL)
for(i in 1:length(reults)){
smallresults <- rbind(smallresults, results[[i]]$name)
}
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
}
head(smallresults)
apply(results[[1]]$ests, 2, mean)
# Save results ------------------------------------------------------------
smallresults <- data.frame(delta = NULL, comprisk = NULL, lambda = NULL, var = NULL, HR = NULL)
meanresults <- data.frame(rc = NULL, rn = NULL, ra = NULL)
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean)[1:3])
}
cbind(smallresults, meanresults)
res <- cbind(smallresults, meanresults)
head(res)
meanresults <- data.frame(rc = NULL, rn = NULL, ra = NULL)
meanresults
head(results[[1]]$ests)
source("function.R")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()#data.frame(delta = NULL, comprisk = NULL, lambda = NULL, var = NULL, HR = NULL)
# meanresults <- data.frame(rc = NULL, rn = NULL, ra = NULL)
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
head(res)
head(meanresults)
i
apply(results[[i]]$ests, 2, mean)
head(meanresults)
tail(meanresults)
apply(results[[i]]$ests, 2, mean)
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()#data.frame(delta = NULL, comprisk = NULL, lambda = NULL, var = NULL, HR = NULL)
# meanresults <- data.frame(rc = NULL, rn = NULL, ra = NULL)
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
head(res)
names(res)
names(res)[6:10] <- c("rc", "rn", "ra", "rcox", "nsub")
head(res)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e5, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
}
}
}
}
}
source("function.R")
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e5, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
}
}
}
}
}
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e5, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
}
}
}
}
}
source("function.R")
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e5, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
}
}
}
}
}
results <- list()
i <- 1
starttime <- Sys.time()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
}
}
}
}
}
results <- list()
i <- 1
starttime <- Sys.time()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
i <- i + 1
cat(i, "\n")
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
}
}
}
}
}
source("function.R")
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
set.seed(25012023)
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)
results <- list()
i <- 1
starttime <- Sys.time()
for(delta in deltas){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(hr in HR){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i)
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i, "\n")
cat("Total time so far: ", difftime(Sys.time(), starttime), "\n")
i <- i + 1
}
}
}
}
}
rgompertz <- function(n, alpha = exp(-10), beta = .085){
u <- runif(n)
log(1 - beta / alpha * log(1-u)) / beta
}
Z <- rgompertz(10000)
summary(Z)
rgompertz <- function(n, alpha = exp(-10), beta = .085){
u <- runif(n)
log(1 - beta / alpha * log(1-u)) / beta
}
Z <- rgompertz(n = 10000)
summary(Z)
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
cat("Time left: ", (48-i) * difftime(Sys.time(), starttime) / i, "\n")
cat("Total time so far: ", difftime(Sys.time(), starttime), "\n")
i <- i + 1
}
}
}
}
}
endtime <- Sys.time()
difftime(starttime, endtime)
saveRDS(results, "allresults.rds")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()#data.frame(delta = NULL, comprisk = NULL, lambda = NULL, var = NULL, HR = NULL)
# meanresults <- data.frame(rc = NULL, rn = NULL, ra = NULL)
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
names(res)[6:10] <- c("rc", "rn", "ra", "rcox", "nsub")
head(res)
saveRDS(res, "meanresults.rds")
