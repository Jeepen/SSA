a <- exp(coef(lm(log(deathhazards) ~ I(0:100)))[1])
b <- coef(lm(log(deathhazards) ~ I(0:100)))[2]
a
b
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
a
b
a
b
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
deltas <- c(Inf, 10, 1)
competingRisk <- c(FALSE, TRUE)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(comp in competingRisk){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, comprisk = comp, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, comprisk = comp))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
endtime <- Sys.time()
difftime(starttime, endtime)
saveRDS(results, "allresults.rds")
library(foreach)
library(doRNG)
saveRDS(results, "allresults.rds")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
names(res)[6:10] <- c("rc", "rn", "ra", "rcox", "nsub")
saveRDS(res, "meanresults.rds")
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
d <- readRDS("meanresults.rds")
subset(d, var == 0 & comprisk == FALSE & lambda == .072)
subset(d, HR == 2 & delta == 1)
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
source("function.R")
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (48-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(72-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
totalscenarios <- length(deltas) * length(lambda2) * lenght(frailtyVar) * length(HR) * length(HR2)
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
totalscenarios
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
warnings()
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
endtime <- Sys.time()
difftime(endtime, starttime)
warnings()
summary(results[[70]]$ests)
apply(results[[70]]$ests,2,sum(is.na))
apply(results[[70]]$ests,2,function(x) sum(is.na(x)))
apply(results[[70]]$ests,2,function(x) sum(is.nan(x)))
results[[70]]$name
X <- rexp(.01)
X <- rexp(n = 1e3, rate = .01)
Z <- rgompertz(1e3, x = X, HR = 5)
Z <- rgompertz(1e3)
summary(X)
length(X)
Z <- rgompertz(n = 1e3, x = X, HR = 5)
a = 0.0001755355
b = 0.0649845
limit <- 1 - exp(-a/b * (exp(b*x)))
x <- X
limit <- 1 - exp(-a/b * (exp(b*x)))
length(limit)
sum(u < limit)
u <- runif(1e3)
sum(u< limit)
sum(u > limit)
z[u < limit] <- log(1 - b / a * log(1-u[u < limit])) / b
z <- u
z[u < limit] <- log(1 - b / a * log(1-u[u < limit])) / b
z[u > limit] <- log((-b/a*log(1-u[u>limit]) + 1 - exp(b*x) + HR * exp(b*x)) / HR) / b
fisk <- 0
for(i in 1:72) fisk <- fisk + (is.na(results[[i]]$ests[2]))
fisk
results[[70]]$ests[2]
results[[70]]$ests[,2]
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1)
lambda2 <- c(.072, .036)
frailtyVar <- c(0,1)
HR <- c(1,2)                                                                    # Between X and Y
HR2 <- c(0, 1, 5)                                                               # Between X and Z, note that 0 is a hack - it results in Z=Inf
totalscenarios <- length(deltas) * length(lambda2) * length(frailtyVar) * length(HR) * length(HR2)
# All simulations ---------------------------------------------------------
results <- list()
i <- 1
starttime <- Sys.time()
for(hr in HR){
for(hr2 in HR2){
for(lambda in lambda2){
for(vars in frailtyVar){
for(delta in deltas){
cat(i, "\n")
results[[i]] <- list(name = data.frame(delta = delta, HR2 = hr2, lambda = lambda, var = vars, HR = hr),
ests = simfunction(n = 1e4, nsim = 1000, l2 = lambda, HR = hr, frailtyVar = vars, delta = delta, HR2 = hr2))
cat("Expected time left:", (totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Total time so far:", difftime(Sys.time(), starttime, units = "mins"), "\n")
cat("Expected total time:", difftime(Sys.time(), starttime, units = "mins") +
(totalscenarios-i) * difftime(Sys.time(), starttime, units = "mins") / i, "\n")
cat("Results", apply(results[[i]]$ests, 2, mean), "\n")
i <- i + 1
}
}
}
}
}
endtime <- Sys.time()
difftime(endtime, starttime)
saveRDS(results, "allresults2.rds")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
names(res)[6:10] <- c("rc", "rn", "ra", "rcox", "nsub")
saveRDS(res, "meanresults2.rds")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
names(res)[6:10] <- c("rc", "rn", "ra", "nsub")
# Save results ------------------------------------------------------------
smallresults <- meanresults <- data.frame()
for(i in 1:length(results)){
smallresults <- rbind(smallresults, results[[i]]$name)
meanresults <- rbind(meanresults, apply(results[[i]]$ests, 2, mean))
}
res <- cbind(smallresults, meanresults)
names(res)[6:9] <- c("rc", "rn", "ra", "nsub")
saveRDS(res, "meanresults2.rds")
# ---------------------------------------------------
#
# Author: Jeppe
# Date: 2023-01-26
#
# Script Description: Look at results from simulation
#
# ---------------------------------------------------
rm(list = ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
d <- readRDS("meanresults2.rds")
subset(d, var == 0 & HR2 == 1 & lambda == .072)
subset(d, var == 0 & HR2 == 0 & lambda == .072)
subset(d, HR == 2 & delta == 1)
subset(d, HR2 == 5 & delta == 10 & HR = 1)
subset(d, HR2 == 5 & delta == 10 & HR == 1)
subset(d, HR2 == 5 & HR == 1)
subset(d, HR2 == 1 & HR == 1)
subset(d, HR2 == 5 & HR == 1, lambda == .036)
subset(d, HR2 == 1 & HR == 1, lambda == .036)
subset(d, HR2 == 5 & HR == 1, lambda == .036)
subset(d, lambda == 0.036)
subset(d, HR2 == 5 & HR == 1 & lambda == .036)
subset(d, HR2 == 1 & HR == 1 & lambda == .036)
subset(d, HR2 == 1 & HR == 1 & lambda == .036 & var == 0)
subset(d, HR2 == 5 & HR == 1 & lambda == .036 & var == 0)
subset(d, HR == 1 & lambda == .036 & var == 0)
subset(d, HR == 1 & lambda == .036 & var == 0 & delta == Inf)
x <- rexp(1e5, rate = 2)
y <- rexp(1e5, rate = 1)
z <- rexp(1e5, rate = 1)
d <- data.frame(x = x[pmax(x,y) < z],y = y[pmax(x,y) < z])
rc <- with(d, sum(y>x) / sum(x>y))
rc
subset(d, HR == 5 & lambda == .036 & var == 0 & delta == Inf)
pexp(80, rate = .072)
pexp(80, rate = .01)
pexp(80, rate = .001)
