else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
print(i)
}
pers(55)
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
n <- prod(as.numeric(strsplit(as.character(n),"")))
as.numeric(strsplit(as.character(n),""))
strsplit(as.character(n),"")
as.numeric(strsplit(as.character(n),"")[[1]])
prod(as.numeric(strsplit(as.character(n),"")[[1]]))
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
print(i)
}
pers(55)
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
data.frame(Iterations = i, Final number = n)
}
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
data.frame(Iterations = i, Last = n)
}
pers(55)
x <- data.frame(fisk = c(2), ko = c(3))
x <- rbind(x, c(3,5))
c
x
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
out <- data.frame(Iterations = i, Number = n)
if(l == 1){
n
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
out <- rbind(out, c(i, n))
}
}
out
}
pers(55)
pers <- function(n){
i <- 0
l <- length(strsplit(as.character(n), "")[[1]])
out <- data.frame(Iterations = i, Number = n)
if(l == 1){
n
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
out <- rbind(out, c(i, n))
}
}
out
}
pers(55)
str(pers(55))
pers(99999)
test <- matrix(c(1:10, rep(NA,10)), ncol = 2)
test
for(i in 1:n0){
pers(test[i,1])
}
n0 <- 10
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
pers(test[i,1])
}
test
pers(test[i,1])
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 2]
}
test
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
test
n0 <- 100
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
max(test[,2])
test
test[test[,2] == max(test[,2]),]
pers(77)
n0 <- 1000
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
test <- matrix(c(lwr:n0, rep(NA,n-lwr)), ncol = 2)
lwr <- 976
n0 <- 1000
test <- matrix(c(lwr:n0, rep(NA,n-lwr)), ncol = 2)
test <- matrix(c(lwr:n0, rep(NA,n-lwr+1)), ncol = 2)
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
tail(test)
head(test)
lwr <- 976
n0 <- 1000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
for(i in lwr:n0){
tmp <- pers(test[i,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 976
n0 <- 10000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 8876
n0 <- 20000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 18876
n0 <- 30000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 28873
n0 <- 100000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
i
test[test[,2] == max(test[,2]),]
tail(test)
sum(is.na(test))
sum(is.nan(test))
test[test[,2] == max(test[,2]),]
lwr <- 98886
n0 <- 1000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
tail(test[test[,2] == max(test[,2]),])
pers(lwr)
lwr <- 997762
n0 <- 10000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
tail(test[test[,2] == max(test[,2]),])
lwr <- 9999996 #8
n0 <- 11000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
tail(test[test[,2] == max(test[,2]),])
.2+.1
options(digits = 30)
options(digits = 22)
.2+.1
.2+.1
updateR()
library(installr)
install.packages("installr")
install.packages("installR")
install.packages("rinstall")
install.packages("Rinstall")
install.packages("installr")
updateR()
installr::updateR()
q()
n
q()
q()
n
library(biSurv)
setwd("~/Dropbox/RPackage/biSurv")
library(devtools)
install.packages("devtools")
install.packages("systemfonts")
install.packages("systemfonts")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(biSurv)
q()
n
2+2
q()
n
q()
n
library(stringr)
q()
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1.5)
deltas
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
effect_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR = 2, HR2 = 0)
round(apply(effect_timetrend_confounding_smallwindow, 2, mean), 2)
round(apply(effect_confounding_smallwindow, 2, mean), 2)
effect_timetrend_confounding <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR2 = 0)
round(apply(effect_timetrend_confounding, 2, mean), 2)
round(apply(effect_timetrend_confounding, 2, mean), 2)
round(apply(effect_timetrend_confounding, 2, mean), 2)
effect_timetrend_confounding <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, HR2 = 0)
round(apply(effect_timetrend_confounding, 2, mean), 2)
effect_timetrend_confounding <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, HR2 = 0)
round(apply(effect_timetrend_confounding, 2, mean), 2)
e-5
E-5
2e-5
rgompertz <- function(n, a = 3.238905e-5, b = 0.1039083, x = Inf, HR = 0){
u <- z <- runif(n)
limit <- Inf
if(HR == 0){
z <- rep(Inf, n)
}
else if(all(x < Inf) & HR != 1){
limit <- 1 - exp(-a/b * (exp(b*x)))
z[u < limit] <- log(1 - b / a * log(1-u[u < limit])) / b
z[u > limit] <- log((-b/a*log(1-u[u>limit]) + 1 - exp(b*x[u>limit]) + HR * exp(b*x[u>limit])) / HR) / b
}
else{
z <-  log(1 - b / a * log(1-u)) / b
}
z
}
x <- rgompertz(10000)
summary(x)
rgompertz <- function(n, a = 3.238905e-5, b = 0.1039083, x = Inf, HR = 0){
u <- z <- runif(n)
limit <- Inf
if(HR == 0){
z <- rep(Inf, n)
}
else if(all(x < Inf) & HR != 1){
limit <- 1 - exp(-a/b * (exp(b*x)))
z[u < limit] <- log(1 - b / a * log(1-u[u < limit])) / b
z[u > limit] <- log((-b/a*log(1-u[u>limit]) + 1 - exp(b*x[u>limit]) + HR * exp(b*x[u>limit])) / HR) / b
}
else{
z <-  log(1 - b / a * log(1-u)) / b
}
z
}
x <- rgompertz(10000, x = rep(0, 10000))
summary(x)
x <- rgompertz(10000, x = rep(0, 10000), HR = 1)
summary(x)
pexp(80, rate = .02)
pexp(80, rate = .01)
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
pexp(80, rate = .025)
pexp(80, rate = .025)^2
# Simulations -------------------------------------------------------------
# No competing risks, no unmeasured confounding ---------------------------
simple_simple <- simfunction(n = 1e5, nsim = 1000, HR2 = 0)
# Simulations -------------------------------------------------------------
# No competing risks, no unmeasured confounding ---------------------------
simple_simple <- simfunction(n = 1e4, nsim = 1000, HR2 = 0)
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Simulations -------------------------------------------------------------
# No competing risks, no unmeasured confounding ---------------------------
simple_simple <- simfunction(n = 1e4, nsim = 1000, HR2 = 0)
round(apply(simple_simple, 2, mean), 2)
simple_effect <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, HR = 10)
round(apply(simple_effect, 2, mean), 2)
simple_timetrend <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, l1 = .05)
round(apply(simple_effect, 2, mean), 2)
round(apply(simple_timetrend, 2, mean), 2)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .05)
round(apply(competingrisk, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 10, l1 = .05)
pexp(80, rate = .05)
pexp(80, rate = .025)
pexp(80, rate = .025) * pexp(80, rate = .01)
round(apply(competingrisk_dependent, 2, mean), 2)
pexp(80, rate = .025) * pexp(80, rate = .005)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 10, l1 = .005)
round(apply(competingrisk_dependent, 2, mean), 2)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .005)
round(apply(competingrisk, 2, mean), 2)
round(apply(competingrisk_dependent, 2, mean), 2)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .005, l2 = .01)
round(apply(competingrisk, 2, mean), 2)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .001, l2 = .01)
round(apply(competingrisk, 2, mean), 2)
summary(competingrisk)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .001, l2 = .025)
round(apply(competingrisk, 2, mean), 2)
summary(competingrisk)
x <- rexp(1e4, rate = 2)
y <- rexp(1e4, rate = 1)
z <- rexp(1e4, rate = 1)
d <- data.frame(x = x, y = y)[pmax(x,y) < z]
d <- data.frame(x = x, y = y)[pmax(x,y) < z,]
x <- rexp(1e4, rate = 2)
y <- rexp(1e4, rate = 1)
z <- rexp(1e4, rate = 1)
d <- data.frame(x = x, y = y)[pmax(x,y) < z,]
dsub <- subset(d, abs(x-y) < delta)
nsub <- nrow(dsub)
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
x <- rexp(1e4, rate = 2)
y <- rexp(1e4, rate = 1)
z <- rexp(1e4, rate = 1)
d <- data.frame(x = x, y = y)[pmax(x,y) < z,]
dsub <- d
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
rc <- rn <- ra <- numeric(1e4)
for(i in 1:1e4){
x <- rexp(1e4, rate = 2)
y <- rexp(1e4, rate = 1)
z <- rexp(1e4, rate = 1)
d <- data.frame(x = x, y = y)[pmax(x,y) < z,]
dsub <- d
rc[i] <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn[i] <- sum(helpers1) / sum(helpers2)
ra[i] <- rc[i] / rn[i]
}
summary(ra)
mean(ra) + c(-1.96,1.96) * sd(ra) / 100
hist(ra)
round(apply(competingrisk, 2, mean), 2)
# Competing risks, no unmeasured confounding ------------------------------
competingrisk <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, l1 = .05)
round(apply(competingrisk, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 10, l1 = .05)
round(apply(competingrisk_dependent, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 10, l1 = .01)
round(apply(competingrisk_dependent, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 2, l1 = .01)
round(apply(competingrisk_dependent, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = .5, l1 = .05)
round(apply(competingrisk_dependent, 2, mean), 2)
competingrisk_dependent <- simfunction(n = 1e4, nsim = 1000, HR2 = 10, l1 = .01)
round(apply(competingrisk_dependent, 2, mean), 2)
# No competing risks, unmeasured confounding ------------------------------
unmeasured_confounding <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, l1 = .05, theta = 1)
# No competing risks, unmeasured confounding ------------------------------
unmeasured_confounding <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, l1 = .05, frailtyVar = 1)
round(apply(unmeasured_confounding, 2, mean), 2)
# Short window ------------------------------------------------------------
unmeasured_confounding_shortwindow <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, frailtyVar = 1, HR = 5)
round(apply(unmeasured_confounding_shortwindow, 2, mean), 2)
# Short window ------------------------------------------------------------
unmeasured_confounding_shortwindow <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, frailtyVar = 1, HR = 5, delta = 1)
round(apply(unmeasured_confounding_shortwindow, 2, mean), 2)
# Short window ------------------------------------------------------------
unmeasured_confounding_shortwindow <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, frailtyVar = 1, HR = 5, delta = .5)
round(apply(unmeasured_confounding_shortwindow, 2, mean), 2)
simple_effect <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, HR = 2)
round(apply(simple_effect, 2, mean), 2)
round(apply(unmeasured_confounding_shortwindow, 2, mean), 2)
# Short window ------------------------------------------------------------
unmeasured_confounding_shortwindow <- simfunction(n = 1e4, nsim = 1000, HR2 = 1, frailtyVar = 1, HR = 2, delta = 1)
round(apply(unmeasured_confounding_shortwindow, 2, mean), 2)
