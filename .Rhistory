pers(55)
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
data.frame(Iterations = i, Final number = n)
}
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
if(l == 1){
print(paste("Number:", n))
print(paste("Iterations:", i))
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
print(n)
}
}
data.frame(Iterations = i, Last = n)
}
pers(55)
x <- data.frame(fisk = c(2), ko = c(3))
x <- rbind(x, c(3,5))
c
x
pers <- function(n){
i <- 1
l <- length(strsplit(as.character(n), "")[[1]])
out <- data.frame(Iterations = i, Number = n)
if(l == 1){
n
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
out <- rbind(out, c(i, n))
}
}
out
}
pers(55)
pers <- function(n){
i <- 0
l <- length(strsplit(as.character(n), "")[[1]])
out <- data.frame(Iterations = i, Number = n)
if(l == 1){
n
}
else{
while(l > 1){
n <- prod(as.numeric(strsplit(as.character(n),"")[[1]]))
l <- length(strsplit(as.character(n), "")[[1]])
i <- i + 1
out <- rbind(out, c(i, n))
}
}
out
}
pers(55)
str(pers(55))
pers(99999)
test <- matrix(c(1:10, rep(NA,10)), ncol = 2)
test
for(i in 1:n0){
pers(test[i,1])
}
n0 <- 10
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
pers(test[i,1])
}
test
pers(test[i,1])
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 2]
}
test
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
test
n0 <- 100
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
max(test[,2])
test
test[test[,2] == max(test[,2]),]
pers(77)
n0 <- 1000
test <- matrix(c(1:n0, rep(NA,n0)), ncol = 2)
for(i in 1:n0){
tmp <- pers(test[i,1])
test[i,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
test <- matrix(c(lwr:n0, rep(NA,n-lwr)), ncol = 2)
lwr <- 976
n0 <- 1000
test <- matrix(c(lwr:n0, rep(NA,n-lwr)), ncol = 2)
test <- matrix(c(lwr:n0, rep(NA,n-lwr+1)), ncol = 2)
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
tail(test)
head(test)
lwr <- 976
n0 <- 1000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
for(i in lwr:n0){
tmp <- pers(test[i,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 976
n0 <- 10000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 8876
n0 <- 20000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 18876
n0 <- 30000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
lwr <- 28873
n0 <- 100000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
i
test[test[,2] == max(test[,2]),]
tail(test)
sum(is.na(test))
sum(is.nan(test))
test[test[,2] == max(test[,2]),]
lwr <- 98886
n0 <- 1000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
test[test[,2] == max(test[,2]),]
tail(test[test[,2] == max(test[,2]),])
pers(lwr)
lwr <- 997762
n0 <- 10000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
tail(test[test[,2] == max(test[,2]),])
lwr <- 9999996 #8
n0 <- 11000000
test <- matrix(c(lwr:n0, rep(NA,n0-lwr+1)), ncol = 2)
for(i in lwr:n0){
tmp <- pers(test[i-lwr+1,1])
test[i-lwr+1,2] <- tmp[nrow(tmp), 1]
}
tail(test[test[,2] == max(test[,2]),])
.2+.1
options(digits = 30)
options(digits = 22)
.2+.1
.2+.1
updateR()
library(installr)
install.packages("installr")
install.packages("installR")
install.packages("rinstall")
install.packages("Rinstall")
install.packages("installr")
updateR()
installr::updateR()
q()
n
q()
q()
n
library(biSurv)
setwd("~/Dropbox/RPackage/biSurv")
library(devtools)
install.packages("devtools")
install.packages("systemfonts")
install.packages("systemfonts")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(biSurv)
q()
n
2+2
q()
n
q()
n
library(stringr)
q()
# Parameters --------------------------------------------------------------
deltas <- c(Inf, 10, 1.5)
deltas
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
source("demography.R")
set.seed(25012023)
# Simulations -------------------------------------------------------------
simple <- simfunction(n = 1e5, nsim = 1000)
source("function.R")
# Simulations -------------------------------------------------------------
simple <- simfunction(n = 1e5, nsim = 1000)
starttime <- Sys.time()
simple <- simfunction(n = 1e4, nsim = 1000)
endtime <- Sys.time()
difftime(starttime, endtime)
apply(simple, 2, mean)
simfunction <- function(n = 1e5, nsim = 100, l1 = .01, l2 = .01, HR = 1, frailtyVar = 0, delta = Inf,
a = 0.0001755355, b = 0.0649845, HR2 = 0){
rc <- rn <- ra <- rcox <- nsub <- deltas <- p <- numeric(nsim)
out <- foreach(i = 1:nsim, .combine = "rbind", .export = c("rgompertz", "simsubs")) %dorng% {
if(frailtyVar > 0){
frail <- rgamma(n, shape = 1/frailtyVar, scale = frailtyVar)
l1frail <- l1 * frail
l2frail <- l2 * frail
}
else{
l1frail <- rep(l1, n)
l2frail <- rep(l2, n)
}
X <- rexp(n, rate = l1frail)
Y <- numeric(n)
u <- runif(n)
cond <- u < (1-exp(-l2frail*X))
Y[cond] <- -log(1-u[cond]) / l2frail[cond]
Y[!cond] <- (l2frail[!cond] * X[!cond] * (HR-1) - log(1-u[!cond])) / (l2frail[!cond] * HR)
Z <- rgompertz(n, a = a, b = b, x = X, HR = HR2)
d <- data.frame(x = X[pmax(X,Y) < Z],
y = Y[pmax(X,Y) < Z])
# ntotal <- 0
# ncounter <- 0
# d <- NULL
# while(ncounter < n){
#   d <- rbind(d, simsubs(n = n, l1 = l1, l2 = l2, HR = HR, frailtyVar = frailtyVar,
#                         delta = delta, a = a, b = b, HR2 = HR2))
#   ntotal <- ntotal + n
#   ncounter <- with(d, sum(abs(y-x) < delta))
# }
# d <- with(d, d[1:match(n, cumsum(abs(x-y) < delta)),])
# cat("Right?", with(d, sum(abs(x-y) < delta)), "\n")
dsub <- subset(d, abs(x-y) < delta)
nsub <- nrow(dsub)
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
# dCox <- data.frame(time1 = rep(0, sum(Y<X)), time2 = Y[Y < X], status = 1, treat = 0)
# dCox <- rbind(dCox, data.frame(time1 = rep(0, sum(Y>X)), time2 = X[Y>X], status = 0, treat = 0))
# dCox <- rbind(dCox, data.frame(time1 = X[Y>X], time2 = Y[Y>X], status = 1, treat = 1))
# rcox <- coef(coxph(Surv(time1, time2, status) ~ treat, data = dCox, timefix = FALSE))
# c(rc, rn, ra, rcox, nsub)
c(rc, rn, ra, nsub)
}
out
}
starttime <- Sys.time()
simple <- simfunction(n = 1e4, nsim = 1000)
endtime <- Sys.time()
difftime(starttime, endtime)
apply(simple, 2, mean)
simfunction
simfunction <- function(n = 1e5, nsim = 100, l1 = .01, l2 = .01, HR = 1, frailtyVar = 0, delta = Inf,
a = 0.0001755355, b = 0.0649845, HR2 = 1){
rc <- rn <- ra <- rcox <- nsub <- deltas <- p <- numeric(nsim)
out <- foreach(i = 1:nsim, .combine = "rbind", .export = c("rgompertz", "simsubs")) %dorng% {
if(frailtyVar > 0){
frail <- rgamma(n, shape = 1/frailtyVar, scale = frailtyVar)
l1frail <- l1 * frail
l2frail <- l2 * frail
}
else{
l1frail <- rep(l1, n)
l2frail <- rep(l2, n)
}
X <- rexp(n, rate = l1frail)
Y <- numeric(n)
u <- runif(n)
cond <- u < (1-exp(-l2frail*X))
Y[cond] <- -log(1-u[cond]) / l2frail[cond]
Y[!cond] <- (l2frail[!cond] * X[!cond] * (HR-1) - log(1-u[!cond])) / (l2frail[!cond] * HR)
Z <- rgompertz(n, a = a, b = b, x = X, HR = HR2)
d <- data.frame(x = X[pmax(X,Y) < Z],
y = Y[pmax(X,Y) < Z])
# ntotal <- 0
# ncounter <- 0
# d <- NULL
# while(ncounter < n){
#   d <- rbind(d, simsubs(n = n, l1 = l1, l2 = l2, HR = HR, frailtyVar = frailtyVar,
#                         delta = delta, a = a, b = b, HR2 = HR2))
#   ntotal <- ntotal + n
#   ncounter <- with(d, sum(abs(y-x) < delta))
# }
# d <- with(d, d[1:match(n, cumsum(abs(x-y) < delta)),])
# cat("Right?", with(d, sum(abs(x-y) < delta)), "\n")
dsub <- subset(d, abs(x-y) < delta)
nsub <- nrow(dsub)
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
# dCox <- data.frame(time1 = rep(0, sum(Y<X)), time2 = Y[Y < X], status = 1, treat = 0)
# dCox <- rbind(dCox, data.frame(time1 = rep(0, sum(Y>X)), time2 = X[Y>X], status = 0, treat = 0))
# dCox <- rbind(dCox, data.frame(time1 = X[Y>X], time2 = Y[Y>X], status = 1, treat = 1))
# rcox <- coef(coxph(Surv(time1, time2, status) ~ treat, data = dCox, timefix = FALSE))
# c(rc, rn, ra, rcox, nsub)
c(rc, rn, ra, nsub)
}
out
}
starttime <- Sys.time()
simple <- simfunction(n = 1e4, nsim = 1000)
endtime <- Sys.time()
difftime(endtime, starttime)
apply(simple, 2, mean)
starttime <- Sys.time()
simple <- simfunction(n = 1e4, nsim = 1000)
endtime <- Sys.time()
difftime(endtime, starttime)
apply(simple, 2, mean)
starttime <- Sys.time()
simple <- simfunction(n = 1e4, nsim = 1000)
endtime <- Sys.time()
difftime(endtime, starttime)
apply(simple, 2, mean)
effect <- simfunction(n = 1e4, nsim = 1000, HR = 2)
effect <- simfunction(n = 1e4, nsim = 1000, HR = 2)
apply(effect, 2, mean)
effect_smallwindow <- simfunction(n = 1e4, nsim = 1000, HR = 2, delta = 1.5)
effect_smallwindow <- simfunction(n = 1e4, nsim = 1000, HR = 2, delta = 1.5)
effect_smallwindow <- simfunction(n = 1e4, nsim = 1000, HR = 2, delta = 1.5)
# Simulations -------------------------------------------------------------
simple_simple <- simfunction(n = 1e4, nsim = 1000, HR2 = 0)
# Simulations -------------------------------------------------------------
simple_simple <- simfunction(n = 1e4, nsim = 1000, HR2 = 0)
# Simulations -------------------------------------------------------------
simple_simple <- simfunction(n = 1e4, nsim = 1000, HR2 = 0)
apply(simple_simple, 2, mean)
round(apply(simple_simple, 2, mean), 2)
round(apply(simple_simple, 2, mean), 3)
round(apply(simple_simple, 2, mean), 2)
simple_effect <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, HR = 10)
simple_effect <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, HR = 10)
simple_effect <- simfunction(n = 1e4, nsim = 1000, HR2 = 0, HR = 10)
round(apply(simple_effect, 2, mean), 2)
effect_competingrisk <- simfunction(n = 1e4, nsim = 1000, HR = 2)
effect_competingrisk <- simfunction(n = 1e4, nsim = 1000, HR = 2)
effect_competingrisk <- simfunction(n = 1e4, nsim = 1000, HR = 2)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02)
apply(noeffect_competingrisk_timetrend, 2, mean)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 5)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 5)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 5)
apply(noeffect_dependentcompetingrisk_timetrend, 2, mean)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
apply(noeffect_dependentcompetingrisk_timetrend, 2, mean)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 1)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 1)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = 1)
apply(noeffect_dependentcompetingrisk_timetrend, 2, mean)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .02, HR2 = .2)
apply(noeffect_dependentcompetingrisk_timetrend, 2, mean)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
apply(noeffect_competingrisk_timetrend_confounding, 2, mean)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 3)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 3)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 3)
apply(noeffect_competingrisk_timetrend_confounding, 2, mean)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1.5)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1.5)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1.5)
apply(noeffect_competingrisk_timetrend_confounding_smallwindow, 2, mean)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1)
apply(noeffect_competingrisk_timetrend_confounding_smallwindow, 2, mean)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1, delta = 1, HR = 2)
apply(effect_competingrisk_timetrend_confounding_smallwindow, 2, mean)
round(apply(effect_competingrisk_timetrend_confounding_smallwindow, 2, mean), 2)
round(apply(noeffect_competingrisk_timetrend_confounding, 2, mean), 2)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .02, frailtyVar = 1)
round(apply(noeffect_competingrisk_timetrend_confounding, 2, mean), 2)
round(apply(noeffect_competingrisk_timetrend, 2, mean), 2)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04)
noeffect_competingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04)
round(apply(noeffect_competingrisk_timetrend, 2, mean), 2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04, HR2 = .2)
noeffect_dependentcompetingrisk_timetrend <- simfunction(n = 1e4, nsim = 1000, l1 = .04, HR2 = .2)
round(apply(noeffect_dependentcompetingrisk_timetrend, 2, mean), 2)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1)
noeffect_competingrisk_timetrend_confounding <- simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1)
round(apply(noeffect_competingrisk_timetrend_confounding, 2, mean), 2)
round(apply(noeffect_competingrisk_timetrend_confounding, 2, mean), 2)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5)
round(apply(noeffect_competingrisk_timetrend_confounding, 2, mean), 2)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5)
noeffect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5)
round(apply(noeffect_competingrisk_timetrend_confounding_smallwindow, 2, mean), 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR = 2)
effect_competingrisk_timetrend_confounding_smallwindow <-
simfunction(n = 1e4, nsim = 1000, l1 = .04, frailtyVar = 1, delta = .5, HR = 2)
round(apply(effect_competingrisk_timetrend_confounding_smallwindow, 2, mean), 2)
round(apply(noeffect_competingrisk_timetrend_confounding_smallwindow, 2, mean), 2)
