u <- runif(n)
br1 <- 1 - exp(-lambda * L)
br2 <- 1 - exp(-lambda * L - lambda * (L + D1) * exp(gamma) + lambda * L * exp(gamma))
X <- numeric(n)
X[u < br1] <- -log(1 - u[u < br1]) / lambda[u < br1]
X[br1 <= u & u < br2] <- (-log(1 - u[br1 <= u & u < br2]) +
lambda[br1 <= u & u < br2] * L[br1 <= u & u < br2] * (exp(gamma) - 1)) /
(lambda[br1 <= u & u < br2] * exp(gamma))
X[br2<=u] <- (-log(1 - u[br2 <= u]) + lambda[br2 <= u] * D1 * (1 - exp(gamma))) / lambda[br2 <= u]
T <- pmin(X, tau)
ExpCases <- (X <= tau)                                 ## Exposed cases (EC)
casesT <- T[ExpCases]                                  ## Failure time for EC
casesL <- L[ExpCases]                                  ## Treatment start for EC
casesExpRef <- ((casesT - D2) > casesL & (casesT - D2) < (casesL + D1))
casesExpEvent <- (casesT > casesL & (casesT - D1) < casesL)    ## Exposed at event EC
nCases <- length(casesT)                               ## Number of EC
id <- rep(1:nCases,2)                                  ## Their ID number twice
## Collect in data.frame
dCase <- data.frame(id=id,clusters=id,status=rep(c(1,0),each=nCases),
Exp=c(casesExpEvent,casesExpRef), case = 1)
## Sample controls in usual way
controlsExp <- which(X>tau)[1:nCases]
controlsL <- L[controlsExp]
controlsExpRef <- ((casesT-D2)>controlsL&(casesT-D2)<(controlsL+D1))
controlsExpEvent <- (casesT>controlsL&(casesT-D1)<controlsL)
dControl <- data.frame(id=id+nCases,clusters=id,status=rep(c(1,0),each=nCases),
Exp=c(controlsExpEvent,controlsExpRef), case = 0)
d <- rbind(dCase,dControl)
d <- transform(d, EG = Exp*case)
tmp <- coxph(Surv(rep(1,nrow(d)), status) ~ Exp + EG + strata(id), data=d)
proposed[i] <- coef(tmp)[2]
}
summary(proposed)
tmp
summary(proposed)
mean(proposed) + c(-1.96, 1.96) * sd(proposed) / sqrt(nsim)
4 + 64
36 + 64
4 + 81
64 + 25
64 + 81
1 + 16 + 25
16 + 4
4
16
1 + 36
9 + 49
25 + 64
.75*70
50*.8
50*.8^2
source("function.R")
## Practical
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
rm(list=ls())
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
simfunction
n <- 1e3
nsubs <- Inf
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
## Practical
rm(list=ls())
n <- 1e3
nsubs <- Inf
## Sim
X <- rexp(n)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
dsub
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
rc
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
## Practical
rm(list=ls())
n <- 1e5
nsubs <- Inf
## Sim
X <- rexp(n)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
rc
ra
## Sim
X <- rexp(n, rate = 2)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
rc
ra
n <- 1e6
nsubs <- Inf
## Sim
X <- rexp(n, rate = 2)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
rc
ra
rn
X <- rexp(n, rate = 2)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 2)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 2)
Y <- rexp(n)
Z <- rexp(n)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
rm(list=ls())
n <- 1e6
nsubs <- Inf
X <- rexp(n, rate = 1/200)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
rn
ra
rc
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
rc
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmax(X,Y) > Z],
y = Y[pmax(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
## Practical
rm(list=ls())
n <- 1e6
nsubs <- Inf
## Sim
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmin(X,Y) > Z],
y = Y[pmin(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmin(X,Y) > Z],
y = Y[pmin(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmin(X,Y) > Z],
y = Y[pmin(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
X <- rexp(n, rate = 1/80)
Y <- rexp(n, rate = 1/200)
Z <- rexp(n, rate = 1/80)
d <- data.frame(x = X[pmin(X,Y) > Z],
y = Y[pmin(X,Y) > Z])
if(nsubs == Inf){
dsub <- d
}else{
dsub <- d[order(abs(d$y-d$x)),][1:nsubs,]
}
delta <- with(dsub, max(abs(y-x)))
rc <- with(dsub, sum(x < y) / sum(y < x))
helpers1 <- helpers2 <- numeric(100)
for(j in 1:100){
dsample <- d
dsample[,2] <- sample(d[,2])
if(nsubs != Inf){
dsample <- dsample[abs(dsample$y-dsample$x) < delta,]
}
helpers1[j] <- with(dsample, sum(y>x))
helpers2[j] <- with(dsample, sum(x>y))
}
rn <- sum(helpers1) / sum(helpers2)
ra <- rc / rn
ra
library(rstudioapi)
setwd(dirname(getSourceEditorContext()$path))
source("function.R")
sim <- simfunction(nsim = 1000, l1 = 2, comprisk = TRUE)
apply(sim, 2, mean)
summary(sim[,3])
dim(sim)
source("function.R")
sim <- simfunction(nsim = 1000, l1 = 2, comprisk = TRUE)
apply(sim,2,mean)
apply(sim,2,summary)
